// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/liquidity/v1beta1/querier.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryIndividualPoolLiquidityRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
}

func (m *QueryIndividualPoolLiquidityRequest) Reset()         { *m = QueryIndividualPoolLiquidityRequest{} }
func (m *QueryIndividualPoolLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIndividualPoolLiquidityRequest) ProtoMessage()    {}
func (*QueryIndividualPoolLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09f2be5d9966762d, []int{0}
}
func (m *QueryIndividualPoolLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIndividualPoolLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIndividualPoolLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIndividualPoolLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIndividualPoolLiquidityRequest.Merge(m, src)
}
func (m *QueryIndividualPoolLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIndividualPoolLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIndividualPoolLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIndividualPoolLiquidityRequest proto.InternalMessageInfo

type QueryIndividualPoolLiquidityResponse struct {
	PoolLiquidity uint64 `protobuf:"varint,1,opt,name=pool_liquidity,json=poolLiquidity,proto3" json:"pool_liquidity,omitempty" yaml:"pool_liquidity"`
}

func (m *QueryIndividualPoolLiquidityResponse) Reset()         { *m = QueryIndividualPoolLiquidityResponse{} }
func (m *QueryIndividualPoolLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIndividualPoolLiquidityResponse) ProtoMessage()    {}
func (*QueryIndividualPoolLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09f2be5d9966762d, []int{1}
}
func (m *QueryIndividualPoolLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIndividualPoolLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIndividualPoolLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIndividualPoolLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIndividualPoolLiquidityResponse.Merge(m, src)
}
func (m *QueryIndividualPoolLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIndividualPoolLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIndividualPoolLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIndividualPoolLiquidityResponse proto.InternalMessageInfo

type QueryTotalLiquidityRequest struct {
}

func (m *QueryTotalLiquidityRequest) Reset()         { *m = QueryTotalLiquidityRequest{} }
func (m *QueryTotalLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLiquidityRequest) ProtoMessage()    {}
func (*QueryTotalLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09f2be5d9966762d, []int{2}
}
func (m *QueryTotalLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLiquidityRequest.Merge(m, src)
}
func (m *QueryTotalLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLiquidityRequest proto.InternalMessageInfo

type QueryTotalLiquidityResponse struct {
	TotalLiquidity uint64 `protobuf:"varint,1,opt,name=total_liquidity,json=totalLiquidity,proto3" json:"total_liquidity,omitempty" yaml:"total_liquidity"`
}

func (m *QueryTotalLiquidityResponse) Reset()         { *m = QueryTotalLiquidityResponse{} }
func (m *QueryTotalLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLiquidityResponse) ProtoMessage()    {}
func (*QueryTotalLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09f2be5d9966762d, []int{3}
}
func (m *QueryTotalLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLiquidityResponse.Merge(m, src)
}
func (m *QueryTotalLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLiquidityResponse proto.InternalMessageInfo

type QueryTotalCollateralRequest struct {
}

func (m *QueryTotalCollateralRequest) Reset()         { *m = QueryTotalCollateralRequest{} }
func (m *QueryTotalCollateralRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalCollateralRequest) ProtoMessage()    {}
func (*QueryTotalCollateralRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_09f2be5d9966762d, []int{4}
}
func (m *QueryTotalCollateralRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalCollateralRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalCollateralRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalCollateralRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalCollateralRequest.Merge(m, src)
}
func (m *QueryTotalCollateralRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalCollateralRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalCollateralRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalCollateralRequest proto.InternalMessageInfo

type QueryTotalCollateralResponse struct {
	TotalCollateral uint64 `protobuf:"varint,1,opt,name=total_collateral,json=totalCollateral,proto3" json:"total_collateral,omitempty" yaml:"total_collateral"`
}

func (m *QueryTotalCollateralResponse) Reset()         { *m = QueryTotalCollateralResponse{} }
func (m *QueryTotalCollateralResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalCollateralResponse) ProtoMessage()    {}
func (*QueryTotalCollateralResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_09f2be5d9966762d, []int{5}
}
func (m *QueryTotalCollateralResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalCollateralResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalCollateralResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalCollateralResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalCollateralResponse.Merge(m, src)
}
func (m *QueryTotalCollateralResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalCollateralResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalCollateralResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalCollateralResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryIndividualPoolLiquidityRequest)(nil), "comdex.liquidity.v1beta1.QueryIndividualPoolLiquidityRequest")
	proto.RegisterType((*QueryIndividualPoolLiquidityResponse)(nil), "comdex.liquidity.v1beta1.QueryIndividualPoolLiquidityResponse")
	proto.RegisterType((*QueryTotalLiquidityRequest)(nil), "comdex.liquidity.v1beta1.QueryTotalLiquidityRequest")
	proto.RegisterType((*QueryTotalLiquidityResponse)(nil), "comdex.liquidity.v1beta1.QueryTotalLiquidityResponse")
	proto.RegisterType((*QueryTotalCollateralRequest)(nil), "comdex.liquidity.v1beta1.QueryTotalCollateralRequest")
	proto.RegisterType((*QueryTotalCollateralResponse)(nil), "comdex.liquidity.v1beta1.QueryTotalCollateralResponse")
}

func init() {
	proto.RegisterFile("comdex/liquidity/v1beta1/querier.proto", fileDescriptor_09f2be5d9966762d)
}

var fileDescriptor_09f2be5d9966762d = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x6a, 0xd4, 0x40,
	0x1c, 0xc6, 0x13, 0x29, 0x15, 0x06, 0xdd, 0xca, 0xa0, 0xb6, 0xa6, 0x6b, 0x56, 0xa6, 0xb5, 0x08,
	0xb5, 0x19, 0x6a, 0xad, 0x07, 0x41, 0x91, 0x16, 0x84, 0x82, 0x07, 0x8d, 0x7a, 0xf1, 0x22, 0xb3,
	0x9b, 0xd9, 0x74, 0x60, 0x9a, 0x7f, 0x36, 0x99, 0x2c, 0x2e, 0xe2, 0xc5, 0x27, 0x10, 0x7c, 0x09,
	0xf1, 0xe0, 0x23, 0x78, 0xee, 0xcd, 0x82, 0x17, 0x4f, 0x8b, 0xee, 0xfa, 0x04, 0xfb, 0x04, 0x92,
	0x64, 0x76, 0x13, 0xbb, 0xbb, 0xba, 0xdb, 0xdb, 0x90, 0xff, 0xf7, 0xff, 0xbe, 0xdf, 0x24, 0x1f,
	0x41, 0x1b, 0x0d, 0x38, 0xf2, 0xf8, 0x1b, 0x2a, 0x45, 0x2b, 0x11, 0x9e, 0x50, 0x1d, 0xda, 0xde,
	0xae, 0x73, 0xc5, 0xb6, 0x69, 0x2b, 0xe1, 0x91, 0xe0, 0x91, 0x13, 0x46, 0xa0, 0x00, 0xaf, 0xe4,
	0x3a, 0x67, 0xa4, 0x73, 0xb4, 0xce, 0xba, 0xec, 0x83, 0x0f, 0x99, 0x88, 0xa6, 0xa7, 0x5c, 0x6f,
	0x55, 0x7d, 0x00, 0x5f, 0x72, 0xca, 0x42, 0x41, 0x59, 0x10, 0x80, 0x62, 0x4a, 0x40, 0x10, 0xe7,
	0x53, 0xe2, 0xa2, 0xb5, 0x67, 0x09, 0x8f, 0x3a, 0x07, 0x81, 0x27, 0xda, 0xc2, 0x4b, 0x98, 0x7c,
	0x0a, 0x20, 0x9f, 0x0c, 0xbd, 0x5d, 0xde, 0x4a, 0x78, 0xac, 0xf0, 0x26, 0x3a, 0x1f, 0x02, 0xc8,
	0xd7, 0xc2, 0x5b, 0x31, 0x6f, 0x98, 0xb7, 0x16, 0xf6, 0xf0, 0xa0, 0x5b, 0xab, 0x74, 0xd8, 0x91,
	0xbc, 0x4f, 0xf4, 0x80, 0xb8, 0x8b, 0xe9, 0xe9, 0xc0, 0x23, 0x87, 0x68, 0xfd, 0xdf, 0x9e, 0x71,
	0x08, 0x41, 0xcc, 0xf1, 0x23, 0x54, 0xc9, 0x76, 0x47, 0x37, 0xd1, 0xde, 0xd7, 0x06, 0xdd, 0xda,
	0x95, 0x92, 0xf7, 0x68, 0x4e, 0xdc, 0x8b, 0x61, 0xd9, 0x89, 0x54, 0x91, 0x95, 0x25, 0xbd, 0x00,
	0xc5, 0xc6, 0xa0, 0x49, 0x1d, 0xad, 0x4e, 0x9c, 0xea, 0xf8, 0x7d, 0xb4, 0xa4, 0xd2, 0xc9, 0x58,
	0xbe, 0x35, 0xe8, 0xd6, 0xae, 0xe6, 0xf9, 0xa7, 0x04, 0xc4, 0xad, 0xa8, 0xbf, 0xcc, 0xc8, 0xf5,
	0x72, 0xc6, 0x3e, 0x48, 0xc9, 0x14, 0x8f, 0x98, 0x1c, 0x22, 0x34, 0x51, 0x75, 0xf2, 0x58, 0x33,
	0x3c, 0x46, 0x97, 0xf2, 0x88, 0xc6, 0x68, 0xa6, 0x21, 0x56, 0x07, 0xdd, 0xda, 0x72, 0x19, 0xa2,
	0x50, 0x10, 0x37, 0x07, 0x2f, 0xfc, 0xee, 0x7c, 0x5d, 0x40, 0x17, 0xb2, 0xa0, 0xe7, 0x3c, 0x6a,
	0x8b, 0x06, 0xc7, 0xdf, 0x4c, 0xb4, 0x3c, 0xe5, 0xfd, 0xe3, 0x07, 0xce, 0xb4, 0x0a, 0x39, 0x33,
	0x74, 0xc1, 0x7a, 0x78, 0xd6, 0xf5, 0xfc, 0xce, 0x64, 0xf7, 0xfd, 0xf7, 0xdf, 0x1f, 0xcf, 0x51,
	0xbc, 0x45, 0xa7, 0x36, 0xbe, 0x78, 0xf2, 0x56, 0xb7, 0xeb, 0x1d, 0xfe, 0x6c, 0xa2, 0x4a, 0x6a,
	0x18, 0x17, 0x17, 0xb9, 0xfb, 0x1f, 0x92, 0x89, 0xb5, 0xb0, 0x76, 0xe7, 0xdc, 0xd2, 0xd8, 0x9b,
	0x19, 0xf6, 0x4d, 0xbc, 0x36, 0x03, 0x36, 0xfe, 0x62, 0xa2, 0xa5, 0x53, 0xdf, 0x1c, 0xcf, 0x94,
	0x3b, 0x56, 0x21, 0xeb, 0xde, 0xbc, 0x6b, 0x9a, 0xf7, 0x76, 0xc6, 0xbb, 0x81, 0xd7, 0xa7, 0xf3,
	0x16, 0x95, 0xda, 0x7b, 0x79, 0xfc, 0xcb, 0x36, 0x3e, 0xf5, 0x6c, 0xe3, 0xb8, 0x67, 0x9b, 0x27,
	0x3d, 0xdb, 0xfc, 0xd9, 0xb3, 0xcd, 0x0f, 0x7d, 0xdb, 0x38, 0xe9, 0xdb, 0xc6, 0x8f, 0xbe, 0x6d,
	0xbc, 0xda, 0xf1, 0x85, 0x3a, 0x4c, 0xea, 0x29, 0x8d, 0x76, 0xdc, 0x82, 0x66, 0x53, 0x34, 0x04,
	0x93, 0xc3, 0x84, 0x72, 0x86, 0xea, 0x84, 0x3c, 0xae, 0x2f, 0x66, 0x7f, 0x99, 0x9d, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xb5, 0x9d, 0x3b, 0xdb, 0xdd, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	// Get liquidity of a single pool given id
	IndividualPoolLiquidity(ctx context.Context, in *QueryIndividualPoolLiquidityRequest, opts ...grpc.CallOption) (*QueryIndividualPoolLiquidityResponse, error)
	//Get total liquidity of all pools
	PoolsLiquidity(ctx context.Context, in *QueryTotalLiquidityRequest, opts ...grpc.CallOption) (*QueryTotalLiquidityResponse, error)
	//Get total collateral
	TotalCollateral(ctx context.Context, in *QueryTotalCollateralRequest, opts ...grpc.CallOption) (*QueryTotalCollateralResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) IndividualPoolLiquidity(ctx context.Context, in *QueryIndividualPoolLiquidityRequest, opts ...grpc.CallOption) (*QueryIndividualPoolLiquidityResponse, error) {
	out := new(QueryIndividualPoolLiquidityResponse)
	err := c.cc.Invoke(ctx, "/comdex.liquidity.v1beta1.QueryService/IndividualPoolLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) PoolsLiquidity(ctx context.Context, in *QueryTotalLiquidityRequest, opts ...grpc.CallOption) (*QueryTotalLiquidityResponse, error) {
	out := new(QueryTotalLiquidityResponse)
	err := c.cc.Invoke(ctx, "/comdex.liquidity.v1beta1.QueryService/PoolsLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) TotalCollateral(ctx context.Context, in *QueryTotalCollateralRequest, opts ...grpc.CallOption) (*QueryTotalCollateralResponse, error) {
	out := new(QueryTotalCollateralResponse)
	err := c.cc.Invoke(ctx, "/comdex.liquidity.v1beta1.QueryService/TotalCollateral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	// Get liquidity of a single pool given id
	IndividualPoolLiquidity(context.Context, *QueryIndividualPoolLiquidityRequest) (*QueryIndividualPoolLiquidityResponse, error)
	//Get total liquidity of all pools
	PoolsLiquidity(context.Context, *QueryTotalLiquidityRequest) (*QueryTotalLiquidityResponse, error)
	//Get total collateral
	TotalCollateral(context.Context, *QueryTotalCollateralRequest) (*QueryTotalCollateralResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) IndividualPoolLiquidity(ctx context.Context, req *QueryIndividualPoolLiquidityRequest) (*QueryIndividualPoolLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndividualPoolLiquidity not implemented")
}
func (*UnimplementedQueryServiceServer) PoolsLiquidity(ctx context.Context, req *QueryTotalLiquidityRequest) (*QueryTotalLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolsLiquidity not implemented")
}
func (*UnimplementedQueryServiceServer) TotalCollateral(ctx context.Context, req *QueryTotalCollateralRequest) (*QueryTotalCollateralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalCollateral not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_IndividualPoolLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIndividualPoolLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).IndividualPoolLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.liquidity.v1beta1.QueryService/IndividualPoolLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).IndividualPoolLiquidity(ctx, req.(*QueryIndividualPoolLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_PoolsLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).PoolsLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.liquidity.v1beta1.QueryService/PoolsLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).PoolsLiquidity(ctx, req.(*QueryTotalLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_TotalCollateral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalCollateralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).TotalCollateral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.liquidity.v1beta1.QueryService/TotalCollateral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).TotalCollateral(ctx, req.(*QueryTotalCollateralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.liquidity.v1beta1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IndividualPoolLiquidity",
			Handler:    _QueryService_IndividualPoolLiquidity_Handler,
		},
		{
			MethodName: "PoolsLiquidity",
			Handler:    _QueryService_PoolsLiquidity_Handler,
		},
		{
			MethodName: "TotalCollateral",
			Handler:    _QueryService_TotalCollateral_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/liquidity/v1beta1/querier.proto",
}

func (m *QueryIndividualPoolLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIndividualPoolLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIndividualPoolLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIndividualPoolLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIndividualPoolLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIndividualPoolLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolLiquidity != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.PoolLiquidity))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalLiquidity != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.TotalLiquidity))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalCollateralRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalCollateralRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalCollateralRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalCollateralResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalCollateralResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalCollateralResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalCollateral != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.TotalCollateral))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuerier(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryIndividualPoolLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuerier(uint64(m.PoolId))
	}
	return n
}

func (m *QueryIndividualPoolLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolLiquidity != 0 {
		n += 1 + sovQuerier(uint64(m.PoolLiquidity))
	}
	return n
}

func (m *QueryTotalLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalLiquidity != 0 {
		n += 1 + sovQuerier(uint64(m.TotalLiquidity))
	}
	return n
}

func (m *QueryTotalCollateralRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalCollateralResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCollateral != 0 {
		n += 1 + sovQuerier(uint64(m.TotalCollateral))
	}
	return n
}

func sovQuerier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerier(x uint64) (n int) {
	return sovQuerier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryIndividualPoolLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIndividualPoolLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIndividualPoolLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIndividualPoolLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIndividualPoolLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIndividualPoolLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolLiquidity", wireType)
			}
			m.PoolLiquidity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolLiquidity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidity", wireType)
			}
			m.TotalLiquidity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLiquidity |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalCollateralRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalCollateralRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalCollateralRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalCollateralResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalCollateralResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalCollateralResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCollateral", wireType)
			}
			m.TotalCollateral = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCollateral |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerier = fmt.Errorf("proto: unexpected end of group")
)
