// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/liquidation/v1beta1/querier.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryLockedVaultRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLockedVaultRequest) Reset()         { *m = QueryLockedVaultRequest{} }
func (m *QueryLockedVaultRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockedVaultRequest) ProtoMessage()    {}
func (*QueryLockedVaultRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0ea242ad6cfba77, []int{0}
}
func (m *QueryLockedVaultRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedVaultRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedVaultRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedVaultRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedVaultRequest.Merge(m, src)
}
func (m *QueryLockedVaultRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedVaultRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedVaultRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedVaultRequest proto.InternalMessageInfo

type QueryLockedVaultResponse struct {
	LockedVault LockedVault `protobuf:"bytes,1,opt,name=locked_vault,json=lockedVault,proto3" json:"locked_vault" yaml:"locked_vault"`
}

func (m *QueryLockedVaultResponse) Reset()         { *m = QueryLockedVaultResponse{} }
func (m *QueryLockedVaultResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockedVaultResponse) ProtoMessage()    {}
func (*QueryLockedVaultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0ea242ad6cfba77, []int{1}
}
func (m *QueryLockedVaultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedVaultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedVaultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedVaultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedVaultResponse.Merge(m, src)
}
func (m *QueryLockedVaultResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedVaultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedVaultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedVaultResponse proto.InternalMessageInfo

type QueryLockedVaultsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryLockedVaultsRequest) Reset()         { *m = QueryLockedVaultsRequest{} }
func (m *QueryLockedVaultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLockedVaultsRequest) ProtoMessage()    {}
func (*QueryLockedVaultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0ea242ad6cfba77, []int{2}
}
func (m *QueryLockedVaultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedVaultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedVaultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedVaultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedVaultsRequest.Merge(m, src)
}
func (m *QueryLockedVaultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedVaultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedVaultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedVaultsRequest proto.InternalMessageInfo

type QueryLockedVaultsResponse struct {
	LockedVaults []LockedVault       `protobuf:"bytes,1,rep,name=locked_vaults,json=lockedVaults,proto3" json:"locked_vaults" yaml:"locked_vaults"`
	Pagination   *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty" yaml:"pagination"`
}

func (m *QueryLockedVaultsResponse) Reset()         { *m = QueryLockedVaultsResponse{} }
func (m *QueryLockedVaultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLockedVaultsResponse) ProtoMessage()    {}
func (*QueryLockedVaultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0ea242ad6cfba77, []int{3}
}
func (m *QueryLockedVaultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLockedVaultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLockedVaultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLockedVaultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLockedVaultsResponse.Merge(m, src)
}
func (m *QueryLockedVaultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLockedVaultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLockedVaultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLockedVaultsResponse proto.InternalMessageInfo

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0ea242ad6cfba77, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params" yaml:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0ea242ad6cfba77, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryLockedVaultRequest)(nil), "comdex.liquidation.v1beta1.QueryLockedVaultRequest")
	proto.RegisterType((*QueryLockedVaultResponse)(nil), "comdex.liquidation.v1beta1.QueryLockedVaultResponse")
	proto.RegisterType((*QueryLockedVaultsRequest)(nil), "comdex.liquidation.v1beta1.QueryLockedVaultsRequest")
	proto.RegisterType((*QueryLockedVaultsResponse)(nil), "comdex.liquidation.v1beta1.QueryLockedVaultsResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "comdex.liquidation.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "comdex.liquidation.v1beta1.QueryParamsResponse")
}

func init() {
	proto.RegisterFile("comdex/liquidation/v1beta1/querier.proto", fileDescriptor_f0ea242ad6cfba77)
}

var fileDescriptor_f0ea242ad6cfba77 = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x1c, 0x8d, 0xcb, 0xb4, 0x83, 0xd7, 0x21, 0xe6, 0x75, 0xa2, 0x84, 0x29, 0x9d, 0x2c, 0xc4, 0xfe,
	0xa0, 0xc6, 0xea, 0x46, 0x2f, 0x1c, 0x7b, 0xe6, 0xb0, 0x05, 0x09, 0x24, 0x24, 0x40, 0x6e, 0xe3,
	0x65, 0x86, 0xb4, 0x4e, 0xeb, 0xb4, 0xa2, 0x42, 0x5c, 0xe0, 0x0b, 0x20, 0x71, 0x41, 0x7c, 0x02,
	0xee, 0xf0, 0x21, 0x7a, 0x9c, 0xc4, 0x85, 0x53, 0x05, 0x2d, 0x12, 0xf7, 0x7d, 0x02, 0x14, 0xc7,
	0x69, 0x53, 0xca, 0xb2, 0xf6, 0x16, 0xd9, 0xef, 0xf7, 0x7e, 0xef, 0xbd, 0xdf, 0x2f, 0x86, 0x7b,
	0x0d, 0xd1, 0x74, 0xd9, 0x6b, 0xe2, 0xf3, 0x76, 0x97, 0xbb, 0x34, 0xe4, 0xa2, 0x45, 0x7a, 0x95,
	0x3a, 0x0b, 0x69, 0x85, 0xb4, 0xbb, 0xac, 0xc3, 0x59, 0xc7, 0x0e, 0x3a, 0x22, 0x14, 0xc8, 0x8c,
	0x91, 0x76, 0x0a, 0x69, 0x6b, 0xa4, 0x79, 0xd0, 0x10, 0xb2, 0x29, 0x24, 0xa9, 0x53, 0xc9, 0x54,
	0x59, 0x7f, 0x42, 0x12, 0x50, 0x8f, 0xb7, 0x62, 0xb4, 0xe2, 0x31, 0xb7, 0x3d, 0x21, 0x3c, 0x9f,
	0x11, 0x1a, 0x70, 0x42, 0x5b, 0x2d, 0x11, 0xaa, 0x4b, 0xa9, 0x6f, 0x0b, 0x9e, 0xf0, 0x84, 0xfa,
	0x24, 0xd1, 0x97, 0x3e, 0xdd, 0xcd, 0x50, 0x19, 0xd0, 0x0e, 0x6d, 0x26, 0xe5, 0xe5, 0x0c, 0xa0,
	0x2f, 0x1a, 0xaf, 0x98, 0xfb, 0xa2, 0x47, 0xbb, 0x7e, 0x18, 0xc3, 0xf1, 0x3e, 0xbc, 0x79, 0x12,
	0xa9, 0x7d, 0xa8, 0xae, 0x1e, 0x47, 0x37, 0x0e, 0x6b, 0x77, 0x99, 0x0c, 0xd1, 0x75, 0x98, 0xe3,
	0x6e, 0x11, 0xec, 0x80, 0xbd, 0x15, 0x27, 0xc7, 0x5d, 0xfc, 0x1e, 0xc0, 0xe2, 0x3c, 0x56, 0x06,
	0xa2, 0x25, 0x19, 0xf2, 0x60, 0x3e, 0xcd, 0xae, 0xca, 0xd6, 0x0e, 0x77, 0xed, 0xcb, 0x23, 0xb3,
	0x53, 0x34, 0xb5, 0xdb, 0x83, 0x61, 0xc9, 0xb8, 0x18, 0x96, 0x36, 0xfb, 0xb4, 0xe9, 0x3f, 0xc0,
	0x69, 0x2a, 0xec, 0xac, 0xf9, 0x53, 0x24, 0xee, 0xcf, 0x8b, 0x90, 0x89, 0xe2, 0x67, 0x10, 0x4e,
	0xc3, 0xd6, 0x12, 0xee, 0xda, 0xf1, 0x64, 0xec, 0x68, 0x32, 0xb6, 0x9a, 0xcc, 0x44, 0xc1, 0x31,
	0xf5, 0x98, 0xae, 0xad, 0x6d, 0x5d, 0x0c, 0x4b, 0x1b, 0x71, 0xf7, 0x29, 0x07, 0x76, 0x52, 0x84,
	0xf8, 0x0f, 0x80, 0xb7, 0xfe, 0xd3, 0x5b, 0x27, 0xf0, 0x12, 0xae, 0xa7, 0x65, 0xcb, 0x22, 0xd8,
	0xb9, 0xb6, 0x4c, 0x04, 0xdb, 0x3a, 0x82, 0xc2, 0x7c, 0x04, 0x12, 0x3b, 0xf9, 0x54, 0x06, 0x12,
	0x3d, 0x9f, 0x31, 0x9a, 0x9b, 0x64, 0x9d, 0x6d, 0x34, 0x16, 0xba, 0x88, 0xd3, 0x02, 0x44, 0xca,
	0xe8, 0xb1, 0xda, 0x2c, 0x1d, 0x11, 0x3e, 0x83, 0x9b, 0x33, 0xa7, 0xda, 0xf8, 0x09, 0x5c, 0x8d,
	0x37, 0x50, 0x27, 0x8e, 0xb3, 0x1c, 0xc7, 0xb5, 0xb5, 0x2d, 0x6d, 0x76, 0x3d, 0xd1, 0x11, 0x9d,
	0x62, 0x47, 0x13, 0x1d, 0x7e, 0x5a, 0x81, 0x79, 0xd5, 0xea, 0x11, 0xeb, 0xf4, 0x78, 0x83, 0xa1,
	0x6f, 0x00, 0xde, 0xf8, 0x37, 0x7a, 0x74, 0x94, 0xd5, 0xe8, 0x92, 0xad, 0x36, 0xef, 0x2f, 0x57,
	0x14, 0x7b, 0xc4, 0xd5, 0x77, 0xdf, 0x7f, 0x7f, 0xcc, 0x11, 0x54, 0x26, 0x0b, 0xfe, 0x5e, 0xe4,
	0x0d, 0x77, 0xdf, 0xa2, 0xaf, 0x00, 0x6e, 0xcc, 0x6d, 0x0c, 0x5a, 0x4a, 0x42, 0x92, 0xbe, 0x59,
	0x5d, 0xb2, 0x4a, 0x2b, 0xaf, 0x28, 0xe5, 0xf7, 0xd0, 0xfe, 0xa2, 0xca, 0x25, 0xfa, 0x0c, 0xe0,
	0x5a, 0x6a, 0xd0, 0xc8, 0xbe, 0xb2, 0xf3, 0xcc, 0x9e, 0x98, 0x64, 0x61, 0xbc, 0xd6, 0x78, 0xa0,
	0x34, 0xde, 0x41, 0x98, 0x5c, 0xf9, 0xca, 0xd5, 0x9e, 0x0c, 0x7e, 0x59, 0xc6, 0x97, 0x91, 0x65,
	0x0c, 0x46, 0x16, 0x38, 0x1f, 0x59, 0xe0, 0xe7, 0xc8, 0x02, 0x1f, 0xc6, 0x96, 0x71, 0x3e, 0xb6,
	0x8c, 0x1f, 0x63, 0xcb, 0x78, 0x5a, 0xf5, 0x78, 0x78, 0xd6, 0xad, 0x47, 0x22, 0x34, 0x5f, 0x59,
	0x9c, 0x9e, 0xf2, 0x06, 0xa7, 0x7e, 0xc2, 0x3f, 0xdb, 0x21, 0xec, 0x07, 0x4c, 0xd6, 0x57, 0xd5,
	0x83, 0x78, 0xf4, 0x37, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x75, 0x95, 0xe8, 0x10, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryServiceClient interface {
	QueryLockedVault(ctx context.Context, in *QueryLockedVaultRequest, opts ...grpc.CallOption) (*QueryLockedVaultResponse, error)
	QueryLockedVaults(ctx context.Context, in *QueryLockedVaultsRequest, opts ...grpc.CallOption) (*QueryLockedVaultsResponse, error)
	QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryServiceClient struct {
	cc grpc1.ClientConn
}

func NewQueryServiceClient(cc grpc1.ClientConn) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) QueryLockedVault(ctx context.Context, in *QueryLockedVaultRequest, opts ...grpc.CallOption) (*QueryLockedVaultResponse, error) {
	out := new(QueryLockedVaultResponse)
	err := c.cc.Invoke(ctx, "/comdex.liquidation.v1beta1.QueryService/QueryLockedVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryLockedVaults(ctx context.Context, in *QueryLockedVaultsRequest, opts ...grpc.CallOption) (*QueryLockedVaultsResponse, error) {
	out := new(QueryLockedVaultsResponse)
	err := c.cc.Invoke(ctx, "/comdex.liquidation.v1beta1.QueryService/QueryLockedVaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) QueryParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.liquidation.v1beta1.QueryService/QueryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
type QueryServiceServer interface {
	QueryLockedVault(context.Context, *QueryLockedVaultRequest) (*QueryLockedVaultResponse, error)
	QueryLockedVaults(context.Context, *QueryLockedVaultsRequest) (*QueryLockedVaultsResponse, error)
	QueryParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (*UnimplementedQueryServiceServer) QueryLockedVault(ctx context.Context, req *QueryLockedVaultRequest) (*QueryLockedVaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockedVault not implemented")
}
func (*UnimplementedQueryServiceServer) QueryLockedVaults(ctx context.Context, req *QueryLockedVaultsRequest) (*QueryLockedVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryLockedVaults not implemented")
}
func (*UnimplementedQueryServiceServer) QueryParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryParams not implemented")
}

func RegisterQueryServiceServer(s grpc1.Server, srv QueryServiceServer) {
	s.RegisterService(&_QueryService_serviceDesc, srv)
}

func _QueryService_QueryLockedVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockedVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryLockedVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.liquidation.v1beta1.QueryService/QueryLockedVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryLockedVault(ctx, req.(*QueryLockedVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryLockedVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLockedVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryLockedVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.liquidation.v1beta1.QueryService/QueryLockedVaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryLockedVaults(ctx, req.(*QueryLockedVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_QueryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).QueryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.liquidation.v1beta1.QueryService/QueryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).QueryParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.liquidation.v1beta1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryLockedVault",
			Handler:    _QueryService_QueryLockedVault_Handler,
		},
		{
			MethodName: "QueryLockedVaults",
			Handler:    _QueryService_QueryLockedVaults_Handler,
		},
		{
			MethodName: "QueryParams",
			Handler:    _QueryService_QueryParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/liquidation/v1beta1/querier.proto",
}

func (m *QueryLockedVaultRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedVaultRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedVaultRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuerier(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockedVaultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedVaultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedVaultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LockedVault.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLockedVaultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedVaultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedVaultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLockedVaultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLockedVaultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLockedVaultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuerier(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LockedVaults) > 0 {
		for iNdEx := len(m.LockedVaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LockedVaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuerier(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuerier(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuerier(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuerier(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLockedVaultRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuerier(uint64(m.Id))
	}
	return n
}

func (m *QueryLockedVaultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LockedVault.Size()
	n += 1 + l + sovQuerier(uint64(l))
	return n
}

func (m *QueryLockedVaultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryLockedVaultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LockedVaults) > 0 {
		for _, e := range m.LockedVaults {
			l = e.Size()
			n += 1 + l + sovQuerier(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuerier(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuerier(uint64(l))
	return n
}

func sovQuerier(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuerier(x uint64) (n int) {
	return sovQuerier(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryLockedVaultRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedVaultRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedVaultRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedVaultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedVaultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedVaultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVault", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockedVault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedVaultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedVaultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedVaultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLockedVaultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLockedVaultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLockedVaultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockedVaults = append(m.LockedVaults, LockedVault{})
			if err := m.LockedVaults[len(m.LockedVaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuerier
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuerier
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuerier(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuerier
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuerier(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuerier
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuerier
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuerier
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuerier
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuerier
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuerier        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuerier          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuerier = fmt.Errorf("proto: unexpected end of group")
)
