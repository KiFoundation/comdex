// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/liquidation/v1beta1/locked_vault.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LockedVault struct {
	Id                   uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	VaultId              uint64                                 `protobuf:"varint,2,opt,name=vault_id,json=vaultId,proto3" json:"vault_id,omitempty" yaml:"id"`
	PairId               uint64                                 `protobuf:"varint,3,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
	Owner                string                                 `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	AmountIn             github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=amount_in,json=amountIn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_in" yaml:"amount_in"`
	AmountOut            github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=amount_out,json=amountOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_out" yaml:"amount_out"`
	Initiator            string                                 `protobuf:"bytes,7,opt,name=initiator,proto3" json:"initiator,omitempty" yaml:"admin"`
	IsAuctioned          bool                                   `protobuf:"varint,8,opt,name=is_auctioned,json=isAuctioned,proto3" json:"is_auctioned,omitempty" yaml:"is_auctioned"`
	CrAtLiquidation      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,9,opt,name=cr_at_liquidation,json=crAtLiquidation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"cr_at_liquidation" yaml:"cr_at_liquidation"`
	LiquidationTimestamp time.Time                              `protobuf:"bytes,10,opt,name=liquidation_timestamp,json=liquidationTimestamp,proto3,stdtime" json:"liquidation_timestamp" yaml:"liquidation_timestamp"`
}

func (m *LockedVault) Reset()         { *m = LockedVault{} }
func (m *LockedVault) String() string { return proto.CompactTextString(m) }
func (*LockedVault) ProtoMessage()    {}
func (*LockedVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_fb5e1732edb48801, []int{0}
}
func (m *LockedVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedVault.Merge(m, src)
}
func (m *LockedVault) XXX_Size() int {
	return m.Size()
}
func (m *LockedVault) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedVault.DiscardUnknown(m)
}

var xxx_messageInfo_LockedVault proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LockedVault)(nil), "comdex.liquidation.v1beta1.LockedVault")
}

func init() { proto.RegisterFile("comdex/liquidation/v1beta1/locked_vault.proto", fileDescriptor_fb5e1732edb48801) }

var fileDescriptor_fb5e1732edb48801 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4f, 0x4f, 0xd4, 0x4c,
	0x18, 0x6f, 0xf7, 0x85, 0xdd, 0xed, 0x2c, 0x79, 0x91, 0x82, 0xc9, 0xb8, 0xc1, 0xce, 0xa6, 0x26,
	0x64, 0x2f, 0xb6, 0x41, 0xe2, 0x45, 0x2f, 0xb2, 0x7a, 0xa9, 0x21, 0x42, 0x1a, 0xe3, 0xc1, 0xc4,
	0x34, 0xb3, 0x6d, 0x5d, 0x26, 0xb4, 0x9d, 0xb5, 0x9d, 0x22, 0x7c, 0x04, 0x6f, 0xf8, 0x2d, 0xfc,
	0x28, 0x1c, 0xb9, 0x98, 0x18, 0x0f, 0xa3, 0x0e, 0xdf, 0xa0, 0x9f, 0xc0, 0x74, 0xa6, 0xcb, 0x2e,
	0xc8, 0x85, 0xd3, 0xb4, 0xcf, 0xf3, 0xfb, 0xd7, 0xa7, 0xf3, 0x00, 0x78, 0x18, 0x27, 0x09, 0x75,
	0x13, 0x1a, 0x1e, 0xc5, 0x51, 0x70, 0x8c, 0xcb, 0x84, 0x39, 0xd3, 0x9c, 0x32, 0x6a, 0xf6, 0x43,
	0x9a, 0x46, 0xf1, 0x89, 0x93, 0x90, 0x4f, 0x25, 0x89, 0x30, 0x23, 0x34, 0x73, 0x8e, 0xb7, 0xc7,
	0x31, 0xc3, 0xdb, 0xfd, 0x8d, 0x09, 0x9d, 0x50, 0x09, 0x73, 0xeb, 0x27, 0xc5, 0xe8, 0xa3, 0x09,
	0xa5, 0x93, 0x24, 0x76, 0xe5, 0xdb, 0xb8, 0xfc, 0xe8, 0x32, 0x92, 0xc6, 0x05, 0xc3, 0xe9, 0x54,
	0x01, 0xec, 0xef, 0x6d, 0xd0, 0xdb, 0x93, 0x4e, 0xef, 0x6a, 0x23, 0xf3, 0x11, 0x68, 0x91, 0x08,
	0xea, 0x03, 0x7d, 0xb8, 0x34, 0x5a, 0x17, 0x1c, 0xb5, 0xbc, 0xa8, 0xe2, 0xc8, 0x38, 0xc5, 0x69,
	0xf2, 0xcc, 0x26, 0x91, 0xed, 0xb7, 0x48, 0x64, 0xee, 0x80, 0xae, 0x8c, 0x15, 0x90, 0x08, 0xb6,
	0x24, 0x14, 0x0a, 0x8e, 0x3a, 0x52, 0xe1, 0x26, 0xbe, 0x73, 0xac, 0xaa, 0xe6, 0x53, 0xd0, 0x99,
	0x62, 0x92, 0xd7, 0x9c, 0xff, 0x24, 0x67, 0x53, 0x70, 0xd4, 0x3e, 0xc0, 0x24, 0x97, 0x94, 0xff,
	0x15, 0xa5, 0x81, 0xd8, 0x7e, 0x7b, 0x2a, 0x3b, 0xa6, 0x0b, 0x96, 0xe9, 0xe7, 0x2c, 0xce, 0xe1,
	0xd2, 0x40, 0x1f, 0x1a, 0xa3, 0x07, 0x82, 0xa3, 0xe5, 0xfd, 0xba, 0x50, 0x71, 0xb4, 0xa2, 0x38,
	0xb2, 0x6f, 0xfb, 0x0a, 0x67, 0x1e, 0x01, 0x03, 0xa7, 0xb4, 0xcc, 0x58, 0x40, 0x32, 0xb8, 0x2c,
	0x49, 0x6f, 0xce, 0x39, 0xd2, 0x7e, 0x72, 0xb4, 0x35, 0x21, 0xec, 0xb0, 0x1c, 0x3b, 0x21, 0x4d,
	0xdd, 0x90, 0x16, 0x29, 0x2d, 0x9a, 0xe3, 0x71, 0x11, 0x1d, 0xb9, 0xec, 0x74, 0x1a, 0x17, 0x8e,
	0x97, 0x31, 0xc1, 0x51, 0x77, 0x57, 0x4a, 0x78, 0x59, 0xc5, 0xd1, 0x3d, 0xe5, 0x72, 0x25, 0x6a,
	0xfb, 0x5d, 0xdc, 0x74, 0x4d, 0x0a, 0x40, 0x53, 0xa7, 0x25, 0x83, 0x6d, 0xe9, 0x76, 0x70, 0x67,
	0x37, 0x43, 0xb9, 0xed, 0x97, 0xac, 0xe2, 0x68, 0xed, 0x9a, 0x1d, 0x2d, 0x99, 0xed, 0x37, 0x1f,
	0xb4, 0x5f, 0x32, 0xf3, 0x39, 0x30, 0x48, 0x46, 0x18, 0xc1, 0x8c, 0xe6, 0xb0, 0x23, 0xfd, 0x1e,
	0xd6, 0x0a, 0xde, 0xac, 0x38, 0x1f, 0x0b, 0x8e, 0xd2, 0x3a, 0xec, 0x1c, 0x6f, 0x7a, 0x60, 0x85,
	0x14, 0x01, 0x2e, 0xc3, 0xfa, 0xe6, 0xc4, 0x11, 0xec, 0x0e, 0xf4, 0x61, 0x77, 0xb4, 0x25, 0x38,
	0xea, 0x79, 0xc5, 0xee, 0xac, 0x5c, 0x71, 0xb4, 0xde, 0xfc, 0xbf, 0x05, 0xb0, 0xed, 0xf7, 0xc8,
	0x1c, 0x63, 0x7e, 0xd1, 0xc1, 0x5a, 0x98, 0x07, 0x98, 0x05, 0x0b, 0x97, 0x11, 0x1a, 0x32, 0xd0,
	0x87, 0x3b, 0x0c, 0xe0, 0x55, 0x1c, 0x0a, 0x8e, 0x56, 0x5f, 0xe6, 0xbb, 0x6c, 0x6f, 0x2e, 0x54,
	0x71, 0x04, 0x55, 0x84, 0x7f, 0x3c, 0x6c, 0x7f, 0x35, 0xbc, 0x0e, 0x36, 0xbf, 0xea, 0xe0, 0xfe,
	0x02, 0x22, 0xb8, 0xba, 0xe3, 0x10, 0x0c, 0xf4, 0x61, 0xef, 0x49, 0xdf, 0x51, 0x5b, 0xe0, 0xcc,
	0xb6, 0xc0, 0x79, 0x3b, 0x43, 0x8c, 0x5e, 0xd4, 0x59, 0x05, 0x47, 0x1b, 0x0b, 0x82, 0x57, 0xdd,
	0x8a, 0xa3, 0x4d, 0x15, 0xe3, 0x56, 0x79, 0xfb, 0xec, 0x17, 0xd2, 0xfd, 0x8d, 0xe4, 0x16, 0xe6,
	0xe8, 0xf5, 0xf9, 0x1f, 0x4b, 0xfb, 0x26, 0x2c, 0xed, 0x5c, 0x58, 0xfa, 0x85, 0xb0, 0xf4, 0xdf,
	0xc2, 0xd2, 0xcf, 0x2e, 0x2d, 0xed, 0xe2, 0xd2, 0xd2, 0x7e, 0x5c, 0x5a, 0xda, 0xfb, 0xe1, 0xcd,
	0xe9, 0x64, 0xb8, 0x64, 0xae, 0xda, 0xfd, 0x93, 0xe6, 0x94, 0x33, 0x1a, 0xb7, 0x65, 0xee, 0x9d,
	0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x1a, 0xf9, 0xd3, 0x19, 0x04, 0x00, 0x00,
}

func (m *LockedVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LiquidationTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LiquidationTimestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLockedVault(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x52
	{
		size := m.CrAtLiquidation.Size()
		i -= size
		if _, err := m.CrAtLiquidation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLockedVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.IsAuctioned {
		i--
		if m.IsAuctioned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Initiator) > 0 {
		i -= len(m.Initiator)
		copy(dAtA[i:], m.Initiator)
		i = encodeVarintLockedVault(dAtA, i, uint64(len(m.Initiator)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.AmountOut.Size()
		i -= size
		if _, err := m.AmountOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLockedVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.AmountIn.Size()
		i -= size
		if _, err := m.AmountIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLockedVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLockedVault(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if m.PairId != 0 {
		i = encodeVarintLockedVault(dAtA, i, uint64(m.PairId))
		i--
		dAtA[i] = 0x18
	}
	if m.VaultId != 0 {
		i = encodeVarintLockedVault(dAtA, i, uint64(m.VaultId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintLockedVault(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLockedVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovLockedVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LockedVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLockedVault(uint64(m.Id))
	}
	if m.VaultId != 0 {
		n += 1 + sovLockedVault(uint64(m.VaultId))
	}
	if m.PairId != 0 {
		n += 1 + sovLockedVault(uint64(m.PairId))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLockedVault(uint64(l))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovLockedVault(uint64(l))
	l = m.AmountOut.Size()
	n += 1 + l + sovLockedVault(uint64(l))
	l = len(m.Initiator)
	if l > 0 {
		n += 1 + l + sovLockedVault(uint64(l))
	}
	if m.IsAuctioned {
		n += 2
	}
	l = m.CrAtLiquidation.Size()
	n += 1 + l + sovLockedVault(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LiquidationTimestamp)
	n += 1 + l + sovLockedVault(uint64(l))
	return n
}

func sovLockedVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLockedVault(x uint64) (n int) {
	return sovLockedVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LockedVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLockedVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultId", wireType)
			}
			m.VaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairId", wireType)
			}
			m.PairId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Initiator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAuctioned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAuctioned = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrAtLiquidation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CrAtLiquidation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LiquidationTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLockedVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLockedVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLockedVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLockedVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLockedVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLockedVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLockedVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLockedVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLockedVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLockedVault = fmt.Errorf("proto: unexpected end of group")
)
