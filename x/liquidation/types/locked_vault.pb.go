// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/liquidation/v1beta1/locked_vault.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LockedVault struct {
	LockedVaultID uint64                                 `protobuf:"varint,1,opt,name=locked_vault_id,json=lockedVaultId,proto3" json:"locked_vault_id,omitempty" yaml:"id"`
	ID            uint64                                 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	PairID        uint64                                 `protobuf:"varint,3,opt,name=pair_id,json=pairId,proto3" json:"pair_id,omitempty" yaml:"pair_id"`
	Owner         string                                 `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	AmountIn      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=amount_in,json=amountIn,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_in" yaml:"amount_in"`
	AmountOut     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=amount_out,json=amountOut,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount_out" yaml:"amount_out"`
	NewOwner      string                                 `protobuf:"bytes,7,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty" yaml:"admin"`
}

func (m *LockedVault) Reset()         { *m = LockedVault{} }
func (m *LockedVault) String() string { return proto.CompactTextString(m) }
func (*LockedVault) ProtoMessage()    {}
func (*LockedVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e1145b6fa4b74d3, []int{0}
}
func (m *LockedVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedVault.Merge(m, src)
}
func (m *LockedVault) XXX_Size() int {
	return m.Size()
}
func (m *LockedVault) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedVault.DiscardUnknown(m)
}

var xxx_messageInfo_LockedVault proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LockedVault)(nil), "comdex.liquidation.v1beta1.locked_vault")
}

func init() {
	proto.RegisterFile("comdex/liquidation/v1beta1/locked_vault.proto", fileDescriptor_6e1145b6fa4b74d3)
}

var fileDescriptor_6e1145b6fa4b74d3 = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xc1, 0x6a, 0xd4, 0x40,
	0x18, 0xc7, 0x93, 0x6d, 0x9b, 0x9a, 0xa1, 0xd5, 0x3a, 0x7a, 0x08, 0x45, 0x66, 0x4a, 0x84, 0xd2,
	0x4b, 0x12, 0x8a, 0xf4, 0xe2, 0x31, 0x8a, 0x10, 0x10, 0x2a, 0x39, 0x28, 0x78, 0x09, 0x93, 0x4c,
	0xba, 0x0e, 0x4d, 0x66, 0xd6, 0x64, 0xd2, 0xb5, 0x6f, 0xe1, 0x63, 0xf8, 0x28, 0x7b, 0x92, 0x1e,
	0xc5, 0xc3, 0xa0, 0xd9, 0x37, 0xd8, 0x27, 0x90, 0xcc, 0x04, 0xc9, 0xf6, 0xd6, 0xd3, 0x7c, 0x33,
	0xff, 0xdf, 0x7c, 0xff, 0xff, 0x07, 0x1f, 0x08, 0x0a, 0x51, 0xd3, 0xf2, 0x5b, 0x54, 0xb1, 0xaf,
	0x1d, 0xa3, 0x44, 0x32, 0xc1, 0xa3, 0x9b, 0xf3, 0xbc, 0x94, 0xe4, 0x3c, 0xaa, 0x44, 0x71, 0x5d,
	0xd2, 0xec, 0x86, 0x74, 0x95, 0x0c, 0x17, 0x8d, 0x90, 0x02, 0x1e, 0x1b, 0x3c, 0x9c, 0xe0, 0xe1,
	0x88, 0x1f, 0x3f, 0x9f, 0x8b, 0xb9, 0xd0, 0x58, 0x34, 0x54, 0xe6, 0x87, 0xff, 0x73, 0x07, 0x1c,
	0x4c, 0x1b, 0xc1, 0x77, 0xe0, 0xc9, 0xf4, 0x9e, 0x31, 0xea, 0xd9, 0x27, 0xf6, 0xd9, 0x6e, 0x8c,
	0x7a, 0x85, 0x0f, 0xdf, 0x6b, 0xe9, 0xe3, 0xa0, 0x24, 0x6f, 0x37, 0x0a, 0xbb, 0xb7, 0xa4, 0xae,
	0x5e, 0xfb, 0x8c, 0xfa, 0xe9, 0x61, 0x35, 0xd1, 0x28, 0x7c, 0x09, 0x66, 0x8c, 0x7a, 0x33, 0xfd,
	0xf5, 0x59, 0xaf, 0xf0, 0xec, 0x3e, 0x3f, 0x63, 0x14, 0x5e, 0x80, 0xfd, 0x05, 0x61, 0xcd, 0x60,
	0xb2, 0xa3, 0xc9, 0x17, 0xbd, 0xc2, 0xce, 0x07, 0xc2, 0x1a, 0x4d, 0x3f, 0x36, 0xf4, 0x88, 0xf8,
	0xa9, 0x33, 0x54, 0x09, 0x85, 0xa7, 0x60, 0x4f, 0x2c, 0x79, 0xd9, 0x78, 0xbb, 0x27, 0xf6, 0x99,
	0x1b, 0x1f, 0x6d, 0x14, 0x3e, 0x30, 0xa8, 0x7e, 0xf6, 0x53, 0x23, 0xc3, 0x0c, 0xb8, 0xa4, 0x16,
	0x1d, 0x97, 0x19, 0xe3, 0xde, 0x9e, 0x66, 0xe3, 0x95, 0xc2, 0xd6, 0x6f, 0x85, 0x4f, 0xe7, 0x4c,
	0x7e, 0xe9, 0xf2, 0xb0, 0x10, 0x75, 0x54, 0x88, 0xb6, 0x16, 0xed, 0x78, 0x04, 0x2d, 0xbd, 0x8e,
	0xe4, 0xed, 0xa2, 0x6c, 0xc3, 0x84, 0xcb, 0x8d, 0xc2, 0x47, 0xa6, 0xf3, 0xff, 0x46, 0x7e, 0xfa,
	0xc8, 0xd4, 0x09, 0x87, 0x39, 0x00, 0xe3, 0xbb, 0xe8, 0xa4, 0xe7, 0x68, 0x87, 0x37, 0x0f, 0x76,
	0x78, 0xba, 0xe5, 0x20, 0x3a, 0xe9, 0xa7, 0x63, 0xee, 0xcb, 0x4e, 0xc2, 0x00, 0xb8, 0xbc, 0x5c,
	0x66, 0x66, 0xe0, 0xfd, 0xfb, 0x03, 0x13, 0x5a, 0xeb, 0x48, 0xbc, 0x5c, 0x5e, 0x0e, 0x44, 0xfc,
	0x69, 0xf5, 0x17, 0x59, 0x3f, 0x7a, 0x64, 0xad, 0x7a, 0x64, 0xdf, 0xf5, 0xc8, 0xfe, 0xd3, 0x23,
	0xfb, 0xfb, 0x1a, 0x59, 0x77, 0x6b, 0x64, 0xfd, 0x5a, 0x23, 0xeb, 0xf3, 0xc5, 0x56, 0xb0, 0x61,
	0x5f, 0x02, 0x71, 0x75, 0xc5, 0x0a, 0x46, 0xaa, 0xf1, 0x1e, 0x6d, 0x2f, 0x9c, 0xce, 0x9a, 0x3b,
	0x7a, 0x61, 0x5e, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x16, 0xd2, 0xe1, 0x93, 0x02, 0x00,
	0x00,
}

func (m *LockedVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintLockedVault(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.AmountOut.Size()
		i -= size
		if _, err := m.AmountOut.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLockedVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.AmountIn.Size()
		i -= size
		if _, err := m.AmountIn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLockedVault(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLockedVault(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if m.PairID != 0 {
		i = encodeVarintLockedVault(dAtA, i, uint64(m.PairID))
		i--
		dAtA[i] = 0x18
	}
	if m.ID != 0 {
		i = encodeVarintLockedVault(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if m.LockedVaultID != 0 {
		i = encodeVarintLockedVault(dAtA, i, uint64(m.LockedVaultID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLockedVault(dAtA []byte, offset int, v uint64) int {
	offset -= sovLockedVault(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LockedVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockedVaultID != 0 {
		n += 1 + sovLockedVault(uint64(m.LockedVaultID))
	}
	if m.ID != 0 {
		n += 1 + sovLockedVault(uint64(m.ID))
	}
	if m.PairID != 0 {
		n += 1 + sovLockedVault(uint64(m.PairID))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLockedVault(uint64(l))
	}
	l = m.AmountIn.Size()
	n += 1 + l + sovLockedVault(uint64(l))
	l = m.AmountOut.Size()
	n += 1 + l + sovLockedVault(uint64(l))
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovLockedVault(uint64(l))
	}
	return n
}

func sovLockedVault(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLockedVault(x uint64) (n int) {
	return sovLockedVault(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LockedVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLockedVault
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: locked_vault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: locked_vault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVaultID", wireType)
			}
			m.LockedVaultID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockedVaultID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairID", wireType)
			}
			m.PairID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PairID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLockedVault
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLockedVault
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLockedVault(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLockedVault
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLockedVault(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLockedVault
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLockedVault
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLockedVault
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLockedVault
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLockedVault
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLockedVault        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLockedVault          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLockedVault = fmt.Errorf("proto: unexpected end of group")
)
