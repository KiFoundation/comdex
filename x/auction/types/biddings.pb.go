// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/auction/v1beta1/biddings.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Biddings struct {
	Id               uint64                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	AuctionId        uint64                                        `protobuf:"varint,2,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty" yaml:"auction_id"`
	AuctionStatus    bool                                          `protobuf:"varint,3,opt,name=auction_status,json=auctionStatus,proto3" json:"auction_status,omitempty" yaml:"auction_status"`
	Bidder           github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=bidder,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"bidder,omitempty" yaml:"bidder"`
	Bid              github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,5,opt,name=bid,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bid" yaml:"bid"`
	BiddingTimestamp time.Time                                     `protobuf:"bytes,6,opt,name=bidding_timestamp,json=biddingTimestamp,proto3,stdtime" json:"bidding_timestamp" yaml:"bidding_timestamp"`
	BiddingStatus    string                                        `protobuf:"bytes,7,opt,name=bidding_status,json=biddingStatus,proto3" json:"bidding_status,omitempty" yaml:"bidding_status"`
}

func (m *Biddings) Reset()         { *m = Biddings{} }
func (m *Biddings) String() string { return proto.CompactTextString(m) }
func (*Biddings) ProtoMessage()    {}
func (*Biddings) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5a3f4b8597bafd2, []int{0}
}
func (m *Biddings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Biddings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Biddings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Biddings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Biddings.Merge(m, src)
}
func (m *Biddings) XXX_Size() int {
	return m.Size()
}
func (m *Biddings) XXX_DiscardUnknown() {
	xxx_messageInfo_Biddings.DiscardUnknown(m)
}

var xxx_messageInfo_Biddings proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Biddings)(nil), "comdex.auction.v1beta1.Biddings")
}

func init() {
	proto.RegisterFile("comdex/auction/v1beta1/biddings.proto", fileDescriptor_a5a3f4b8597bafd2)
}

var fileDescriptor_a5a3f4b8597bafd2 = []byte{
	// 466 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0xe3, 0x6e, 0x29, 0x5b, 0xa3, 0x22, 0x36, 0x62, 0x51, 0xb6, 0x12, 0x76, 0x15, 0x81,
	0xe8, 0xa5, 0xb6, 0x0a, 0x9c, 0x90, 0x90, 0xd8, 0x70, 0xe2, 0x9a, 0xe5, 0xb4, 0x97, 0x55, 0x12,
	0xa7, 0xc1, 0xd0, 0xd4, 0x55, 0xed, 0x22, 0xf6, 0x2d, 0xf6, 0xcc, 0x13, 0xf0, 0x28, 0x3d, 0xee,
	0x91, 0x53, 0x80, 0xf6, 0x0d, 0x72, 0xe4, 0x84, 0xfc, 0x27, 0x2d, 0xb9, 0xed, 0x29, 0x99, 0x99,
	0x6f, 0xfc, 0x79, 0x7e, 0x63, 0xf8, 0x3c, 0x13, 0x25, 0xcb, 0xbf, 0xd1, 0x64, 0x9d, 0x29, 0x2e,
	0x16, 0xf4, 0xeb, 0x34, 0xcd, 0x55, 0x32, 0xa5, 0x29, 0x67, 0x8c, 0x2f, 0x0a, 0x49, 0x96, 0x2b,
	0xa1, 0x84, 0xff, 0xc4, 0xca, 0x88, 0x93, 0x11, 0x27, 0x1b, 0x3e, 0x2e, 0x44, 0x21, 0x8c, 0x84,
	0xea, 0x3f, 0xab, 0x1e, 0xe2, 0x42, 0x88, 0x62, 0x9e, 0x53, 0x13, 0xa5, 0xeb, 0x19, 0x55, 0xbc,
	0xcc, 0xa5, 0x4a, 0xca, 0xa5, 0x13, 0xa0, 0x4c, 0xc8, 0x52, 0x48, 0x9a, 0x26, 0x32, 0xdf, 0x5b,
	0x66, 0x82, 0x2f, 0x6c, 0x3d, 0xfc, 0xde, 0x85, 0xc7, 0x91, 0xbb, 0x81, 0xff, 0x14, 0x76, 0x38,
	0x0b, 0xc0, 0x08, 0x8c, 0xbb, 0xd1, 0xa0, 0xae, 0x70, 0xff, 0x3a, 0x29, 0xe7, 0x6f, 0x42, 0xce,
	0xc2, 0xb8, 0xc3, 0x99, 0xff, 0x1a, 0x42, 0x77, 0xab, 0x2b, 0xce, 0x82, 0x8e, 0x91, 0x9d, 0xd6,
	0x15, 0x3e, 0xb1, 0xb2, 0x43, 0x2d, 0x8c, 0xfb, 0x2e, 0xf8, 0xc0, 0xfc, 0x77, 0xf0, 0x61, 0x53,
	0x91, 0x2a, 0x51, 0x6b, 0x19, 0x1c, 0x8d, 0xc0, 0xf8, 0x38, 0x3a, 0xab, 0x2b, 0x7c, 0xda, 0xee,
	0xb4, 0xf5, 0x30, 0x1e, 0xb8, 0xc4, 0x85, 0x89, 0xfd, 0x4b, 0xd8, 0xd3, 0x90, 0xf2, 0x55, 0xd0,
	0x1d, 0x81, 0x71, 0x3f, 0x8a, 0xea, 0x0a, 0x0f, 0x6c, 0xa7, 0xcd, 0x87, 0x7f, 0x2b, 0x3c, 0x29,
	0xb8, 0xfa, 0xb4, 0x4e, 0x49, 0x26, 0x4a, 0xea, 0x66, 0xb6, 0x9f, 0x89, 0x64, 0x5f, 0xa8, 0xba,
	0x5e, 0xe6, 0x92, 0x9c, 0x67, 0xd9, 0x39, 0x63, 0xab, 0x5c, 0xca, 0xd8, 0x9d, 0xe8, 0x7f, 0x86,
	0x47, 0x29, 0x67, 0xc1, 0xbd, 0x11, 0x18, 0x3f, 0x78, 0x79, 0x46, 0x6c, 0x0b, 0xd1, 0xb4, 0x1a,
	0xf2, 0xe4, 0xbd, 0xe0, 0x8b, 0xe8, 0xed, 0xa6, 0xc2, 0x5e, 0x5d, 0x61, 0xb8, 0xf7, 0xd5, 0xa6,
	0x2f, 0xee, 0x60, 0xaa, 0xdb, 0x63, 0x6d, 0xe2, 0x97, 0xf0, 0xc4, 0x2d, 0xfb, 0x6a, 0xbf, 0xa6,
	0xa0, 0x67, 0x9c, 0x87, 0xc4, 0x2e, 0x92, 0x34, 0x8b, 0x24, 0x1f, 0x1b, 0x45, 0xf4, 0xcc, 0x59,
	0x07, 0x87, 0x91, 0x5b, 0x47, 0x84, 0x37, 0xbf, 0x30, 0x88, 0x1f, 0xb9, 0xfc, 0xbe, 0x4f, 0x83,
	0x6f, 0xb4, 0x0e, 0xfc, 0x7d, 0x83, 0xef, 0x3f, 0xf0, 0xed, 0x7a, 0x18, 0x0f, 0x5c, 0xc2, 0x82,
	0x8f, 0x2e, 0x36, 0x7f, 0x90, 0xf7, 0x63, 0x8b, 0xbc, 0xcd, 0x16, 0x81, 0xdb, 0x2d, 0x02, 0xbf,
	0xb7, 0x08, 0xdc, 0xec, 0x90, 0x77, 0xbb, 0x43, 0xde, 0xcf, 0x1d, 0xf2, 0x2e, 0xa7, 0x2d, 0x00,
	0xfa, 0xe1, 0x4e, 0xc4, 0x6c, 0xc6, 0x33, 0x9e, 0xcc, 0x5d, 0x4c, 0x0f, 0x2f, 0xde, 0xf0, 0x48,
	0x7b, 0x66, 0xc4, 0x57, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd4, 0xda, 0xf1, 0x47, 0x10, 0x03,
	0x00, 0x00,
}

func (m *Biddings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Biddings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Biddings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BiddingStatus) > 0 {
		i -= len(m.BiddingStatus)
		copy(dAtA[i:], m.BiddingStatus)
		i = encodeVarintBiddings(dAtA, i, uint64(len(m.BiddingStatus)))
		i--
		dAtA[i] = 0x3a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.BiddingTimestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.BiddingTimestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintBiddings(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	{
		size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBiddings(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintBiddings(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x22
	}
	if m.AuctionStatus {
		i--
		if m.AuctionStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.AuctionId != 0 {
		i = encodeVarintBiddings(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintBiddings(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBiddings(dAtA []byte, offset int, v uint64) int {
	offset -= sovBiddings(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Biddings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBiddings(uint64(m.Id))
	}
	if m.AuctionId != 0 {
		n += 1 + sovBiddings(uint64(m.AuctionId))
	}
	if m.AuctionStatus {
		n += 2
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovBiddings(uint64(l))
	}
	l = m.Bid.Size()
	n += 1 + l + sovBiddings(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.BiddingTimestamp)
	n += 1 + l + sovBiddings(uint64(l))
	l = len(m.BiddingStatus)
	if l > 0 {
		n += 1 + l + sovBiddings(uint64(l))
	}
	return n
}

func sovBiddings(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBiddings(x uint64) (n int) {
	return sovBiddings(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Biddings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBiddings
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Biddings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Biddings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AuctionStatus = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = github_com_cosmos_cosmos_sdk_types.AccAddress(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.BiddingTimestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiddingStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBiddings
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBiddings
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BiddingStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBiddings(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBiddings
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBiddings(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBiddings
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBiddings
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBiddings
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBiddings
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBiddings
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBiddings        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBiddings          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBiddings = fmt.Errorf("proto: unexpected end of group")
)
