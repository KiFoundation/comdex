// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/auction/v1beta1/auction.proto

package types

import (
	fmt "fmt"
	types1 "github.com/comdex-official/comdex/x/asset/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CollateralAuction struct {
	Id                  uint64                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	LockedVaultId       uint64                                        `protobuf:"varint,2,opt,name=locked_vault_id,json=lockedVaultId,proto3" json:"locked_vault_id,omitempty" yaml:"locked_vault_id"`
	AuctionedCollateral github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,3,opt,name=auctioned_collateral,json=auctionedCollateral,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"auctioned_collateral" yaml:"auctioned_collateral"`
	DiscountQuantity    github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,4,opt,name=discount_quantity,json=discountQuantity,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"discount_quantity" yaml:"discount_quantity"`
	Bidder              github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=bidder,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"bidder,omitempty" yaml:"owner"`
	Bid                 github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,6,opt,name=bid,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bid" yaml:"bid"`
	MinBid              github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,7,opt,name=min_bid,json=minBid,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"min_bid" yaml:"min_bid"`
	MaxBid              github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,8,opt,name=max_bid,json=maxBid,proto3,casttype=github.com/cosmos/cosmos-sdk/types.Coin" json:"max_bid" yaml:"max_bid"`
	EndTime             time.Time                                     `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time" yaml:"end_time"`
	Pair                types1.Pair                                   `protobuf:"bytes,10,opt,name=pair,proto3" json:"pair" yaml:"pair"`
}

func (m *CollateralAuction) Reset()         { *m = CollateralAuction{} }
func (m *CollateralAuction) String() string { return proto.CompactTextString(m) }
func (*CollateralAuction) ProtoMessage()    {}
func (*CollateralAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4bb9aead25d5fe6c, []int{0}
}
func (m *CollateralAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollateralAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollateralAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollateralAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollateralAuction.Merge(m, src)
}
func (m *CollateralAuction) XXX_Size() int {
	return m.Size()
}
func (m *CollateralAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_CollateralAuction.DiscardUnknown(m)
}

var xxx_messageInfo_CollateralAuction proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CollateralAuction)(nil), "comdex.auction.v1beta1.CollateralAuction")
}

func init() {
	proto.RegisterFile("comdex/auction/v1beta1/auction.proto", fileDescriptor_4bb9aead25d5fe6c)
}

var fileDescriptor_4bb9aead25d5fe6c = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x93, 0xae, 0xb4, 0xab, 0xc7, 0x18, 0xcb, 0xa6, 0x29, 0x74, 0x22, 0xa9, 0x22, 0x24,
	0x7a, 0x69, 0xa2, 0xc2, 0x0d, 0x89, 0x43, 0xd3, 0x13, 0x42, 0x42, 0x10, 0x10, 0x12, 0x5c, 0x22,
	0x27, 0x76, 0x8b, 0x59, 0x12, 0x97, 0xc4, 0x19, 0xed, 0xb7, 0x98, 0xc4, 0x95, 0x0f, 0xc0, 0x47,
	0xe9, 0x71, 0x47, 0x4e, 0x01, 0xda, 0x6f, 0xd0, 0x1b, 0x9c, 0x90, 0x63, 0xa7, 0x13, 0x7f, 0xa4,
	0xae, 0xa7, 0xc4, 0xd6, 0xf3, 0x3e, 0xbf, 0xf7, 0x79, 0xa5, 0xd7, 0xe0, 0x5e, 0x48, 0x63, 0x84,
	0xa7, 0x0e, 0xcc, 0x43, 0x46, 0x68, 0xe2, 0x9c, 0xf7, 0x03, 0xcc, 0x60, 0xbf, 0x3a, 0xdb, 0x93,
	0x94, 0x32, 0xaa, 0x9d, 0x08, 0x95, 0x5d, 0xdd, 0x4a, 0x55, 0xfb, 0x78, 0x4c, 0xc7, 0xb4, 0x94,
	0x38, 0xfc, 0x4f, 0xa8, 0xdb, 0xe6, 0x98, 0xd2, 0x71, 0x84, 0x9d, 0xf2, 0x14, 0xe4, 0x23, 0x87,
	0x91, 0x18, 0x67, 0x0c, 0xc6, 0x13, 0x29, 0x30, 0x42, 0x9a, 0xc5, 0x34, 0x73, 0x02, 0x98, 0xe1,
	0x35, 0x31, 0xa4, 0x24, 0xa9, 0x0c, 0xaa, 0xa6, 0xb2, 0x0c, 0xb3, 0xb5, 0x60, 0x02, 0x49, 0x2a,
	0x04, 0xd6, 0xcf, 0x26, 0x38, 0x1c, 0xd2, 0x28, 0x82, 0x0c, 0xa7, 0x30, 0x1a, 0x88, 0xae, 0xb4,
	0xbb, 0xa0, 0x46, 0x90, 0xae, 0x76, 0xd4, 0x6e, 0xdd, 0xdd, 0x5f, 0x15, 0x66, 0x6b, 0x06, 0xe3,
	0xe8, 0x91, 0x45, 0x90, 0xe5, 0xd5, 0x08, 0xd2, 0x5c, 0x70, 0x10, 0xd1, 0xf0, 0x0c, 0x23, 0xff,
	0x1c, 0xe6, 0x11, 0xf3, 0x09, 0xd2, 0x6b, 0xa5, 0xb6, 0xbd, 0x2a, 0xcc, 0x13, 0xa1, 0xfd, 0x4b,
	0x60, 0x79, 0xfb, 0xe2, 0xe6, 0x35, 0xbf, 0x78, 0x82, 0xb4, 0xcf, 0x2a, 0x38, 0x96, 0x43, 0xc0,
	0xc8, 0x0f, 0xd7, 0x2d, 0xe8, 0x3b, 0x1d, 0xb5, 0xbb, 0xf7, 0xe0, 0x8e, 0x2d, 0x92, 0xd9, 0x3c,
	0x59, 0x35, 0x25, 0x7b, 0x48, 0x49, 0xe2, 0x3e, 0x9b, 0x17, 0xa6, 0xb2, 0x2a, 0xcc, 0x53, 0x01,
	0xfa, 0x9f, 0x89, 0xf5, 0xab, 0x30, 0xef, 0x8f, 0x09, 0x7b, 0x97, 0x07, 0x76, 0x48, 0x63, 0x47,
	0x4e, 0x49, 0x7c, 0x7a, 0x19, 0x3a, 0x73, 0xd8, 0x6c, 0x82, 0xb3, 0xd2, 0xcf, 0x3b, 0x5a, 0x3b,
	0x5c, 0x0d, 0x42, 0xfb, 0xa4, 0x82, 0x43, 0x44, 0xb2, 0x90, 0xe6, 0x09, 0xf3, 0x3f, 0xe4, 0x30,
	0x61, 0x84, 0xcd, 0xf4, 0xfa, 0xa6, 0xde, 0x9e, 0xca, 0xde, 0x74, 0xd1, 0xdb, 0x3f, 0x0e, 0x5b,
	0x35, 0x76, 0xbb, 0x2a, 0x7f, 0x21, 0xab, 0xb5, 0x37, 0xa0, 0x11, 0x10, 0x84, 0x70, 0xaa, 0xdf,
	0xe8, 0xa8, 0xdd, 0x96, 0x3b, 0x58, 0x15, 0xe6, 0x4d, 0x81, 0xa2, 0x1f, 0x13, 0x9c, 0x72, 0xfb,
	0xde, 0x35, 0xec, 0x07, 0x61, 0x38, 0x40, 0x28, 0xc5, 0x59, 0xe6, 0x49, 0x43, 0xed, 0x3d, 0xd8,
	0x09, 0x08, 0xd2, 0x1b, 0x9b, 0x12, 0x3e, 0x96, 0x09, 0x81, 0xc0, 0x06, 0x04, 0x6d, 0x95, 0x89,
	0x43, 0xb4, 0x1c, 0x34, 0x63, 0x92, 0xf8, 0x9c, 0xd7, 0xdc, 0xc4, 0x1b, 0x48, 0xde, 0x2d, 0xc1,
	0x93, 0x75, 0x5b, 0x31, 0x1b, 0x31, 0x49, 0x5c, 0x89, 0x85, 0xd3, 0x12, 0xbb, 0xbb, 0x2d, 0x56,
	0xd4, 0x6d, 0x89, 0x85, 0x53, 0x8e, 0xf5, 0xc0, 0x2e, 0x4e, 0x90, 0xcf, 0x57, 0x57, 0x6f, 0x95,
	0xdc, 0xb6, 0x2d, 0xf6, 0xda, 0xae, 0xf6, 0xda, 0x7e, 0x55, 0xed, 0xb5, 0x7b, 0x2a, 0xc1, 0x07,
	0x02, 0x5c, 0x55, 0x5a, 0x17, 0xdf, 0x4c, 0xd5, 0x6b, 0xe2, 0x04, 0x71, 0xa9, 0x36, 0x04, 0x75,
	0xbe, 0xc4, 0x3a, 0x90, 0x7e, 0xd5, 0xab, 0xc2, 0xd7, 0x7c, 0x1d, 0xe4, 0x39, 0x24, 0xa9, 0x7b,
	0x24, 0xfd, 0xf6, 0x84, 0x1f, 0xaf, 0xb2, 0xbc, 0xb2, 0xd8, 0x7d, 0x39, 0xff, 0x61, 0x28, 0x5f,
	0x16, 0x86, 0x32, 0x5f, 0x18, 0xea, 0xe5, 0xc2, 0x50, 0xbf, 0x2f, 0x0c, 0xf5, 0x62, 0x69, 0x28,
	0x97, 0x4b, 0x43, 0xf9, 0xba, 0x34, 0x94, 0xb7, 0xfd, 0x3f, 0xb2, 0x72, 0x44, 0x8f, 0x8e, 0x46,
	0x24, 0x24, 0x30, 0x92, 0x67, 0xe7, 0xea, 0xc1, 0x2b, 0xa3, 0x07, 0x8d, 0x32, 0xd3, 0xc3, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xbc, 0xa9, 0x5f, 0x0f, 0x05, 0x00, 0x00,
}

func (m *CollateralAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollateralAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollateralAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pair.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintAuction(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.MaxBid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.MinBid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintAuction(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.DiscountQuantity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.AuctionedCollateral.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAuction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.LockedVaultId != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.LockedVaultId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintAuction(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuction(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CollateralAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAuction(uint64(m.Id))
	}
	if m.LockedVaultId != 0 {
		n += 1 + sovAuction(uint64(m.LockedVaultId))
	}
	l = m.AuctionedCollateral.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.DiscountQuantity.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovAuction(uint64(l))
	}
	l = m.Bid.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.MinBid.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = m.MaxBid.Size()
	n += 1 + l + sovAuction(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovAuction(uint64(l))
	l = m.Pair.Size()
	n += 1 + l + sovAuction(uint64(l))
	return n
}

func sovAuction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuction(x uint64) (n int) {
	return sovAuction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CollateralAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollateralAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollateralAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedVaultId", wireType)
			}
			m.LockedVaultId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockedVaultId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionedCollateral", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AuctionedCollateral.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountQuantity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DiscountQuantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = github_com_cosmos_cosmos_sdk_types.AccAddress(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuction
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuction = fmt.Errorf("proto: unexpected end of group")
)
