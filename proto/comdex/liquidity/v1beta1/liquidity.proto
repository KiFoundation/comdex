syntax = "proto3";
package comdex.liquidity.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos_proto/coin.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (gogoproto.goproto_getters_all) = false;


// Pool defines the liquidity pool that contains pool information.
message Pool {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    // id of the pool
    uint64 id = 1 [(gogoproto.moretags) = "yaml:\"id\"", (gogoproto.jsontag) = "id",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint64"
        }];

    // id of the pool_type
    uint32 type_id = 2 [(gogoproto.moretags) = "yaml:\"type_id\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint32"
        }];

    // denoms of reserve coin pair of the pool
    repeated string reserve_coin_denoms = 3 [(gogoproto.moretags) = "yaml:\"reserve_coin_denoms\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "[\"denomX\",\"denomY\"]"
        }];

    // reserve account address of the pool
    string reserve_account_address = 4 [(gogoproto.moretags) = "yaml:\"reserve_account_address\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"cosmos16ddqestwukv0jzcyfn3fdfq9h2wrs83cr4rfm3\"",
            format: "sdk.AccAddress"
        }];

    // denom of pool coin of the pool
    string pool_coin_denom = 5 [(gogoproto.moretags) = "yaml:\"pool_coin_denom\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4\"",
        }];

    //denoms of collateral coins of the pool
    repeated string collateral_coin_denoms=6 [(gogoproto.moretags) = "yaml:\"collateral_coin_denoms\"",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "[\"denomX\",\"denomY\"]"
}

// Metadata for the state of each pool for invariant checking after genesis export or import.
message PoolMetadata {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    // id of the pool
    uint64 pool_id = 1 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"1\"",
            format: "uint64"
        }];

    // pool coin issued at the pool
    cosmos.base.v1beta1.Coin pool_coin_total_supply = 2 [
        (gogoproto.moretags)   = "yaml:\"pool_coin_total_supply\"",
        (gogoproto.nullable)   = false,
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "{\"denom\": \"poolD35A0CC16EE598F90B044CE296A405BA9C381E38837599D96F2F70C2F02A23A4\", \"amount\": \"1000000\"}",
            format: "sdk.Coin"
        }];

    // reserve coins deposited in the pool
    repeated cosmos.base.v1beta1.Coin reserve_coins = 3 [
        (gogoproto.moretags)   = "yaml:\"reserve_coins\"",
        (gogoproto.nullable)   = false,
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "[{\"denom\": \"denomX\", \"amount\": \"1000000\"}, {\"denom\": \"denomY\", \"amount\": \"2000000\"}]",
            format: "sdk.Coins"
        }];


    //collateral coins deposited in the pool 
    repeated cosmos.base.v1.beta1.Coin collateral_coins=4[
        (gogoproto.moretags)   = "yaml:\"collateral_coins\"",
        (gogoproto.nullable)   = false,
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "[{\"denom\": \"denomX\", \"amount\": \"1000000\"}, {\"denom\": \"denomY\", \"amount\": \"2000000\"}]",
            format: "sdk.Coins"
        }];
}