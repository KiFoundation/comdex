syntax = "proto3";
package comdex.liquidity.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/comdex-official/comdex/x/liquidity/types";
option (gogoproto.equal_all) = false;
option (gogoproto.goproto_getters_all) = false;

// Query defines the gRPC query service for the liquidity module.
service QueryService {
    // Get liquidity of a single pool given id
    rpc IndividualPoolLiquidity (QueryIndividualPoolLiquidityRequest) returns (QueryIndividualPoolLiquidityResponse) {
        option (google.api.http).get = "/comdex/liquidity/v1beta1/liquidity/{pool_id}";
    }

    //Get total liquidity of all pools
    rpc PoolsLiquidity(QueryTotalLiquidityRequest) returns (QueryTotalLiquidityResponse){
        option (google.api.http).get = "/comdex/liquidity/v1beta1/liquidity";
    }

    //Get total collateral 
    rpc TotalCollateral(QueryTotalCollateralRequest) returns (QueryTotalCollateralResponse){
        option (google.api.http).get = "/comdex/liquidity/v1beta1/collateral";
    }
}
    

message QueryIndividualPoolLiquidityRequest{
    uint64 pool_id=1   [ 
        (gogoproto.moretags) = "yaml:\"pool_id\""
    ];
}

message QueryIndividualPoolLiquidityResponse{
    uint64 pool_liquidity=1   [
        (gogoproto.moretags) = "yaml:\"pool_liquidity\"" 
    ];   
}

message QueryTotalLiquidityRequest{
}

message QueryTotalLiquidityResponse{
    uint64 total_liquidity=1   [ 
        (gogoproto.moretags) = "yaml:\"total_liquidity\""
    ];  
}

message QueryTotalCollateralRequest{
}

message QueryTotalCollateralResponse{
    uint64 total_collateral=1   [ 
        (gogoproto.moretags) = "yaml:\"total_collateral\""
    ];  
}