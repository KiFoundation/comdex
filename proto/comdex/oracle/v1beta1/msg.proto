syntax = "proto3";
package comdex.oracle.v1beta1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "ibc/core/client/v1/client.proto";
import "comdex/oracle/v1beta1/oracle.proto";

option go_package = "github.com/comdex-official/comdex/x/oracle/types";
option (gogoproto.equal_all)           = false;
option (gogoproto.goproto_getters_all) = false;

message MsgAddMarketRequest {
    string from      = 1 [ (gogoproto.moretags) = "yaml:\"from\"" ];
    string symbol    = 2 [ (gogoproto.moretags) = "yaml:\"symbol\"" ];
    uint64 script_id = 3 [
        (gogoproto.customname) = "ScriptID",
        (gogoproto.moretags)   = "yaml:\"script_id\""
    ];
    uint64 id   = 4;
}

message MsgAddMarketResponse {}

message MsgUpdateMarketRequest {
    string from      = 1 [ (gogoproto.moretags) = "yaml:\"from\"" ];
    string symbol    = 2 [ (gogoproto.moretags) = "yaml:\"symbol\"" ];
    uint64 script_id = 3 [
        (gogoproto.customname) = "ScriptID",
        (gogoproto.moretags)   = "yaml:\"script_id\""
    ];
}

message MsgUpdateMarketResponse {}

message MsgRemoveMarketForAssetRequest {
    string from = 1 [ (gogoproto.moretags) = "yaml:\"from\"" ];
    uint64 id   = 2;
    string symbol = 3 [ (gogoproto.moretags) = "yaml:\"symbol\"" ];
}

message MsgFetchPriceData {
    string creator = 1;
    uint64 oracle_script_id = 2 [
        (gogoproto.customname) = "OracleScriptID",
        (gogoproto.moretags) = "yaml:\"oracle_script_id\""
    ];
    string source_channel = 3;
    FetchPriceCallData calldata = 4;
    uint64 ask_count = 5;
    uint64 min_count = 6;
    repeated cosmos.base.v1beta1.Coin fee_limit = 7 [
        (gogoproto.nullable) = false,
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
    ];
    string request_key = 8;
    uint64 prepare_gas = 9;
    uint64 execute_gas = 10;
    string client_id = 11 [(gogoproto.customname) = "ClientID"];
}

message MsgFetchPriceDataResponse {
}

message MsgRemoveMarketForAssetResponse {}

service MsgService {
    rpc MsgAddMarket(MsgAddMarketRequest) returns (MsgAddMarketResponse);
    rpc MsgUpdateMarket(MsgUpdateMarketRequest) returns (MsgUpdateMarketResponse);
    rpc MsgRemoveMarketForAsset(MsgRemoveMarketForAssetRequest)
            returns (MsgRemoveMarketForAssetResponse);
    rpc FetchPriceData(MsgFetchPriceData) returns (MsgFetchPriceDataResponse);
}
