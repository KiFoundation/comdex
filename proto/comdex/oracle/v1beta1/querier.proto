syntax = "proto3";
package comdex.oracle.v1beta1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "comdex/oracle/v1beta1/oracle.proto";
import "comdex/oracle/v1beta1/params.proto";

option go_package = "github.com/comdex-official/comdex/x/oracle/types";
option (gogoproto.equal_all)           = false;
option (gogoproto.goproto_getters_all) = false;

message QueryMarketsRequest {
    cosmos.base.query.v1beta1.PageRequest pagination = 1
    [ (gogoproto.moretags) = "yaml:\"pagination\"" ];
}

message QueryMarketsResponse {
    repeated Market markets = 1 [
        (gogoproto.nullable) = false,
        (gogoproto.moretags) = "yaml:\"markets\""
    ];
    cosmos.base.query.v1beta1.PageResponse pagination = 2
    [ (gogoproto.moretags) = "yaml:\"pagination\"" ];
}

message QueryMarketRequest {
    string symbol = 1 [ (gogoproto.moretags) = "yaml:\"symbol\"" ];
}

message QueryMarketResponse {
    Market market = 1 [
        (gogoproto.nullable) = false,
        (gogoproto.moretags) = "yaml:\"market\""
    ];
}

message QueryParamsRequest {}

message QueryParamsResponse {
    Params params = 1 [
        (gogoproto.moretags) = "yaml:\"params\"",
        (gogoproto.nullable) = false
    ];
}

message QueryFetchPriceRequest {int64 request_id = 1;}

message QueryFetchPriceResponse {
    FetchPriceResult result = 1;
}

message QueryLastFetchPriceIdRequest {}

message QueryLastFetchPriceIdResponse {int64 request_id = 1;}

service QueryService {
    rpc QueryMarkets(QueryMarketsRequest) returns (QueryMarketsResponse) {
        option (google.api.http).get = "/comdex/oracle/v1beta1/markets";
    }
    rpc QueryMarket(QueryMarketRequest) returns (QueryMarketResponse) {
        option (google.api.http).get = "/comdex/oracle/v1beta1/markets/{symbol}";
    }
    rpc QueryParams(QueryParamsRequest) returns (QueryParamsResponse) {
        option (google.api.http).get = "/comdex/oracle/v1beta1/params";
    }
    rpc FetchPriceResult(QueryFetchPriceRequest) returns (QueryFetchPriceResponse) {
        option (google.api.http).get = "/comdex/oracle/v1beta1/fetch_price_result/{request_id}";
    }

    rpc LastFetchPriceId(QueryLastFetchPriceIdRequest) returns (QueryLastFetchPriceIdResponse) {
        option (google.api.http).get = "/comdex/oracle/v1beta1/last_fetch_price_id";
    }
}
